// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: third.proto

package thirdProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdPartyServiceClient is the client API for ThirdPartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdPartyServiceClient interface {
	GetPicCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPicCaptchaResponse, error)
	CheckPicCaptcha(ctx context.Context, in *CheckPicCaptchaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSmsCaptcha(ctx context.Context, in *GetSmsCaptchaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckSmsCaptcha(ctx context.Context, in *CheckSmsCaptchaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type thirdPartyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdPartyServiceClient(cc grpc.ClientConnInterface) ThirdPartyServiceClient {
	return &thirdPartyServiceClient{cc}
}

func (c *thirdPartyServiceClient) GetPicCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPicCaptchaResponse, error) {
	out := new(GetPicCaptchaResponse)
	err := c.cc.Invoke(ctx, "/thirdProto.ThirdPartyService/GetPicCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyServiceClient) CheckPicCaptcha(ctx context.Context, in *CheckPicCaptchaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/thirdProto.ThirdPartyService/CheckPicCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyServiceClient) GetSmsCaptcha(ctx context.Context, in *GetSmsCaptchaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/thirdProto.ThirdPartyService/GetSmsCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyServiceClient) CheckSmsCaptcha(ctx context.Context, in *CheckSmsCaptchaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/thirdProto.ThirdPartyService/CheckSmsCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, "/thirdProto.ThirdPartyService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/thirdProto.ThirdPartyService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdPartyServiceServer is the server API for ThirdPartyService service.
// All implementations must embed UnimplementedThirdPartyServiceServer
// for forward compatibility
type ThirdPartyServiceServer interface {
	GetPicCaptcha(context.Context, *emptypb.Empty) (*GetPicCaptchaResponse, error)
	CheckPicCaptcha(context.Context, *CheckPicCaptchaRequest) (*emptypb.Empty, error)
	GetSmsCaptcha(context.Context, *GetSmsCaptchaRequest) (*emptypb.Empty, error)
	CheckSmsCaptcha(context.Context, *CheckSmsCaptchaRequest) (*emptypb.Empty, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedThirdPartyServiceServer()
}

// UnimplementedThirdPartyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThirdPartyServiceServer struct {
}

func (UnimplementedThirdPartyServiceServer) GetPicCaptcha(context.Context, *emptypb.Empty) (*GetPicCaptchaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPicCaptcha not implemented")
}
func (UnimplementedThirdPartyServiceServer) CheckPicCaptcha(context.Context, *CheckPicCaptchaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPicCaptcha not implemented")
}
func (UnimplementedThirdPartyServiceServer) GetSmsCaptcha(context.Context, *GetSmsCaptchaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsCaptcha not implemented")
}
func (UnimplementedThirdPartyServiceServer) CheckSmsCaptcha(context.Context, *CheckSmsCaptchaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSmsCaptcha not implemented")
}
func (UnimplementedThirdPartyServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedThirdPartyServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedThirdPartyServiceServer) mustEmbedUnimplementedThirdPartyServiceServer() {}

// UnsafeThirdPartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdPartyServiceServer will
// result in compilation errors.
type UnsafeThirdPartyServiceServer interface {
	mustEmbedUnimplementedThirdPartyServiceServer()
}

func RegisterThirdPartyServiceServer(s grpc.ServiceRegistrar, srv ThirdPartyServiceServer) {
	s.RegisterService(&ThirdPartyService_ServiceDesc, srv)
}

func _ThirdPartyService_GetPicCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServiceServer).GetPicCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdProto.ThirdPartyService/GetPicCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServiceServer).GetPicCaptcha(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyService_CheckPicCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPicCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServiceServer).CheckPicCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdProto.ThirdPartyService/CheckPicCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServiceServer).CheckPicCaptcha(ctx, req.(*CheckPicCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyService_GetSmsCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServiceServer).GetSmsCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdProto.ThirdPartyService/GetSmsCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServiceServer).GetSmsCaptcha(ctx, req.(*GetSmsCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyService_CheckSmsCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSmsCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServiceServer).CheckSmsCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdProto.ThirdPartyService/CheckSmsCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServiceServer).CheckSmsCaptcha(ctx, req.(*CheckSmsCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdProto.ThirdPartyService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdProto.ThirdPartyService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdPartyService_ServiceDesc is the grpc.ServiceDesc for ThirdPartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdPartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thirdProto.ThirdPartyService",
	HandlerType: (*ThirdPartyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPicCaptcha",
			Handler:    _ThirdPartyService_GetPicCaptcha_Handler,
		},
		{
			MethodName: "CheckPicCaptcha",
			Handler:    _ThirdPartyService_CheckPicCaptcha_Handler,
		},
		{
			MethodName: "GetSmsCaptcha",
			Handler:    _ThirdPartyService_GetSmsCaptcha_Handler,
		},
		{
			MethodName: "CheckSmsCaptcha",
			Handler:    _ThirdPartyService_CheckSmsCaptcha_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _ThirdPartyService_UploadFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _ThirdPartyService_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "third.proto",
}
