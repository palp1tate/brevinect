// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: meeting.proto

package meetingProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeetingServiceClient is the client API for MeetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetingServiceClient interface {
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	GetRoomList(ctx context.Context, in *GetRoomListRequest, opts ...grpc.CallOption) (*GetRoomListResponse, error)
}

type meetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingServiceClient(cc grpc.ClientConnInterface) MeetingServiceClient {
	return &meetingServiceClient{cc}
}

func (c *meetingServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, "/meetingProto.MeetingService/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetRoomList(ctx context.Context, in *GetRoomListRequest, opts ...grpc.CallOption) (*GetRoomListResponse, error) {
	out := new(GetRoomListResponse)
	err := c.cc.Invoke(ctx, "/meetingProto.MeetingService/GetRoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingServiceServer is the server API for MeetingService service.
// All implementations must embed UnimplementedMeetingServiceServer
// for forward compatibility
type MeetingServiceServer interface {
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	GetRoomList(context.Context, *GetRoomListRequest) (*GetRoomListResponse, error)
	mustEmbedUnimplementedMeetingServiceServer()
}

// UnimplementedMeetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeetingServiceServer struct {
}

func (UnimplementedMeetingServiceServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedMeetingServiceServer) GetRoomList(context.Context, *GetRoomListRequest) (*GetRoomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomList not implemented")
}
func (UnimplementedMeetingServiceServer) mustEmbedUnimplementedMeetingServiceServer() {}

// UnsafeMeetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetingServiceServer will
// result in compilation errors.
type UnsafeMeetingServiceServer interface {
	mustEmbedUnimplementedMeetingServiceServer()
}

func RegisterMeetingServiceServer(s grpc.ServiceRegistrar, srv MeetingServiceServer) {
	s.RegisterService(&MeetingService_ServiceDesc, srv)
}

func _MeetingService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meetingProto.MeetingService/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetRoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetRoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meetingProto.MeetingService/GetRoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetRoomList(ctx, req.(*GetRoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetingService_ServiceDesc is the grpc.ServiceDesc for MeetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meetingProto.MeetingService",
	HandlerType: (*MeetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoom",
			Handler:    _MeetingService_GetRoom_Handler,
		},
		{
			MethodName: "GetRoomList",
			Handler:    _MeetingService_GetRoomList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meeting.proto",
}
